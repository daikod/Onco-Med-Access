# .env.example for Oncology Medicines Access Management System
#
# This file serves as a template for the environment variables required by the application.
# Copy this file to .env and replace the placeholder values with your actual configuration.
#
# SECURITY BEST PRACTICES:
# 1. DO NOT commit the .env file to your version control system (e.g., Git).
#    The .gitignore file should already be configured to ignore .env files.
# 2. For production environments, it is highly recommended to use a dedicated secret
#    management service such as AWS Secrets Manager, Google Secret Manager, or HashiCorp Vault
#    instead of a .env file.
# 3. Ensure all secrets (e.g., APP_SECRET, DB_PASSWORD) are strong and randomly generated.

#--------------------------------------------------------------------------
# Application Configuration
#--------------------------------------------------------------------------
# Specifies the application environment. Recommended values: 'development', 'production', 'test'.
NODE_ENV=production

# The port on which the application server will listen for incoming requests.
# This should match the port exposed by the 'app' service in docker-compose.yml.
PORT=3000

# The public base URL of your application's API.
# This is used for generating absolute URLs in responses, emails, etc.
API_BASE_URL=https://api.oncologymedicines.com

#--------------------------------------------------------------------------
# Database Configuration (PostgreSQL)
#--------------------------------------------------------------------------
# These variables are used by the 'db' service in docker-compose.yml and the application itself.
DB_USER=oncology_user
DB_PASSWORD=changeme_in_production
DB_NAME=oncology_db

# The full connection string for the application to connect to the database.
# The hostname 'db' refers to the database service name in docker-compose.yml.
DATABASE_URL="postgresql://oncology_user:changeme_in_production@db:5432/oncology_db?schema=public"

#--------------------------------------------------------------------------
# Application Secrets
#--------------------------------------------------------------------------
# A long, cryptographically-secure random string for signing sessions and cookies.
# Generate one with: openssl rand -hex 32
APP_SECRET=replace_with_a_long_random_string_for_app_secret

# A long, cryptographically-secure random string for signing JSON Web Tokens (JWTs).
# Generate one with: openssl rand -hex 32
JWT_SECRET=replace_with_a_long_random_string_for_jwt_secret

#--------------------------------------------------------------------------
# Redis Configuration
#--------------------------------------------------------------------------
# Connection URL for the Redis instance, used for caching and session storage.
# The hostname 'redis' refers to the Redis service name in docker-compose.yml.
REDIS_URL=redis://redis:6379

#--------------------------------------------------------------------------
# SAP Integration
#--------------------------------------------------------------------------
# Credentials and endpoint for interfacing with the SAP system.
# Ensure these are stored securely and access is restricted.
SAP_API_URL=https://sap.example.com/api/v1
SAP_API_USER=sap_api_user
SAP_API_PASSWORD=replace_with_sap_api_password

#--------------------------------------------------------------------------
# Security Settings
#--------------------------------------------------------------------------
# Enable or disable rate limiting on API endpoints to prevent abuse.
RATE_LIMIT_ENABLED=true

# Enable or disable detailed audit logging for critical actions within the system.
AUDIT_LOG_ENABLED=true
